
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000153 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000003a0 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000398 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000003e0 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000003c4 g     F .text	0000001c memset
00000054 g     F .text	00000344 main
00000040 g       *ABS*	00000000 __ram_size
00000153  w      .debug_info	00000000 .hidden path_planner.c.7ff4a42f
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000003e0 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    3e000593          	addi	x11,x0,992
  1c:	    00000613          	addi	x12,x0,0
  20:	    380000ef          	jal	x1,3a0 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    390000ef          	jal	x1,3c4 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    358000ef          	jal	x1,398 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     void _put_str(char *str) { }
     ### 
     ### #endif
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                      fd010113          	addi	x2,x2,-48
     ###         uint8_t *current = (uint8_t *) 0x020000FB;
     ###         uint32_t *visited = (uint32_t *) 0x020000FC;
     ###         
     ###     #endif
     ###     
     ###     graph[ 0] = 0b00001011001100110101001100000000;
  58:	                      0b3357b7          	lui	x15,0xb335
     ### int main(int argc, char const *argv[]) {
  5c:	                      02112623          	sw	x1,44(x2)
  60:	                      02812423          	sw	x8,40(x2)
     ###     graph[ 0] = 0b00001011001100110101001100000000;
  64:	                      30078793          	addi	x15,x15,768 # b335300 <__global_pointer$+0x9334b00>
  68:	                      02000437          	lui	x8,0x2000
  6c:	                      00f42823          	sw	x15,16(x8) # 2000010 <__bss_end+0x10>
     ###                 //   00000011001110100100001001001010
     ###     graph[ 1] = 0b00000011010110100001010000000000;
  70:	                      035a17b7          	lui	x15,0x35a1
  74:	                      40078793          	addi	x15,x15,1024 # 35a1400 <__global_pointer$+0x15a0c00>
  78:	                      00f42a23          	sw	x15,20(x8)
     ###     graph[ 2] = 0b00001100000110100010001000101010;
  7c:	                      0c1a27b7          	lui	x15,0xc1a2
  80:	                      22a78793          	addi	x15,x15,554 # c1a222a <__global_pointer$+0xa1a1a2a>
  84:	                      00f42c23          	sw	x15,24(x8)
     ###     graph[ 3] = 0b00010010000000000000000000000000;
  88:	                      120007b7          	lui	x15,0x12000
  8c:	                      00f42e23          	sw	x15,28(x8)
     ###     graph[ 4] = 0b00010010000000000000000000000000;
  90:	                      02f42023          	sw	x15,32(x8)
     ###     graph[ 5] = 0b00010010000000000000000000000000;
  94:	                      02f42223          	sw	x15,36(x8)
     ###     graph[ 6] = 0b00000011001110100100001001001010;
  98:	                      033a47b7          	lui	x15,0x33a4
  9c:	                      24a78793          	addi	x15,x15,586 # 33a424a <__global_pointer$+0x13a3a4a>
  a0:	                      02f42423          	sw	x15,40(x8)
     ###     graph[ 7] = 0b00110010000000000000000000000000;
  a4:	                      320007b7          	lui	x15,0x32000
  a8:	                      02f42623          	sw	x15,44(x8)
     ###     graph[ 8] = 0b00110010000000000000000000000000;
  ac:	                      02f42823          	sw	x15,48(x8)
     ###     graph[ 9] = 0b00110010000000000000000000000000;
  b0:	                      02f42a23          	sw	x15,52(x8)
     ###     graph[10] = 0b11010011110000100000001101011100;
  b4:	                      d3c207b7          	lui	x15,0xd3c20
  b8:	                      35c78793          	addi	x15,x15,860 # d3c2035c <__global_pointer$+0xd1c1fb5c>
  bc:	                      02f42c23          	sw	x15,56(x8)
     ###     graph[11] = 0b01010100000010100110001110011010;
  c0:	                      540a67b7          	lui	x15,0x540a6
  c4:	                      39a78793          	addi	x15,x15,922 # 540a639a <__global_pointer$+0x520a5b9a>
  c8:	                      02f42e23          	sw	x15,60(x8)
     ###     graph[12] = 0b01011010011101000110100100000000;
  cc:	                      5a7477b7          	lui	x15,0x5a747
  d0:	                      90078793          	addi	x15,x15,-1792 # 5a746900 <__global_pointer$+0x58746100>
  d4:	                      04f42023          	sw	x15,64(x8)
     ###     graph[13] = 0b01100001000000000000000000000000;
  d8:	                      610007b7          	lui	x15,0x61000
  dc:	                      04f42223          	sw	x15,68(x8)
     ###     graph[14] = 0b01111001100000100110001000000000;
  e0:	                      798267b7          	lui	x15,0x79826
  e4:	                      20078793          	addi	x15,x15,512 # 79826200 <__global_pointer$+0x77825a00>
  e8:	                      04f42423          	sw	x15,72(x8)
     ###     graph[15] = 0b01110001000000000000000000000000;
  ec:	                      710007b7          	lui	x15,0x71000
  f0:	                      04f42623          	sw	x15,76(x8)
     ###     graph[16] = 0b01110010100010011001000100000000;
  f4:	                      728997b7          	lui	x15,0x72899
  f8:	                      10078793          	addi	x15,x15,256 # 72899100 <__global_pointer$+0x70898900>
  fc:	                      04f42823          	sw	x15,80(x8)
     ###     graph[17] = 0b10000001000000000000000000000000;
 100:	                      810007b7          	lui	x15,0x81000
 104:	                      04f42a23          	sw	x15,84(x8)
     ###     graph[18] = 0b10000001100110111010100100000000;
 108:	                      819bb7b7          	lui	x15,0x819bb
 10c:	                      90078793          	addi	x15,x15,-1792 # 819ba900 <__global_pointer$+0x7f9ba100>
 110:	                      04f42c23          	sw	x15,88(x8)
     ###     graph[19] = 0b10010011010110101010000100000000;
 114:	                      935aa7b7          	lui	x15,0x935aa
 118:	                      10078793          	addi	x15,x15,256 # 935aa100 <__global_pointer$+0x915a9900>
 11c:	                      04f42e23          	sw	x15,92(x8)
     ###     graph[20] = 0b10011001000000000000000000000000;
 120:	                      990007b7          	lui	x15,0x99000
 124:	                      06f42023          	sw	x15,96(x8)
     ###     graph[21] = 0b10010010101100011011101000000000;
 128:	                      92b1c7b7          	lui	x15,0x92b1c
 12c:	                      a0078793          	addi	x15,x15,-1536 # 92b1ba00 <__global_pointer$+0x90b1b200>
 130:	                      06f42223          	sw	x15,100(x8)
     ###     graph[22] = 0b10101001000000000000000000000000;
 134:	                      a90007b7          	lui	x15,0xa9000
 138:	                      06f42423          	sw	x15,104(x8)
     ###     graph[23] = 0b11110001110000111010101000000000;
 13c:	                      f1c3b7b7          	lui	x15,0xf1c3b
 140:	                      a0078793          	addi	x15,x15,-1536 # f1c3aa00 <__global_pointer$+0xefc3a200>
 144:	                      06f42623          	sw	x15,108(x8)
     ###     graph[24] = 0b11001001101110110101001000000000;
 148:	                      c9bb57b7          	lui	x15,0xc9bb5
 14c:	                      20078793          	addi	x15,x15,512 # c9bb5200 <__global_pointer$+0xc7bb4a00>
 150:	                      06f42823          	sw	x15,112(x8)
     ###     graph[25] = 0b11000001000000000000000000000000;
 154:	                      c10007b7          	lui	x15,0xc1000
 158:	                      06f42a23          	sw	x15,116(x8)
     ###     graph[26] = 0b01010011110110011110010000000000;
 15c:	                      53d9e7b7          	lui	x15,0x53d9e
 160:	                      40078793          	addi	x15,x15,1024 # 53d9e400 <__global_pointer$+0x51d9dc00>
 164:	                      06f42c23          	sw	x15,120(x8)
     ###     graph[27] = 0b11010001000000000000000000000000;
 168:	                      d10007b7          	lui	x15,0xd1000
 16c:	                      06f42e23          	sw	x15,124(x8)
     ###     graph[28] = 0b11010100111010011111001000000000;
 170:	                      d4e9f7b7          	lui	x15,0xd4e9f
 174:	                      20078793          	addi	x15,x15,512 # d4e9f200 <__global_pointer$+0xd2e9ea00>
 178:	                      08f42023          	sw	x15,128(x8)
     ###     graph[29] = 0b11100001000000000000000000000000;
 17c:	                      e10007b7          	lui	x15,0xe1000
 180:	                      08f42223          	sw	x15,132(x8)
     ###     graph[30] = 0b11111001111000101011100100000000;
 184:	                      f9e2c7b7          	lui	x15,0xf9e2c
 188:	                      90078793          	addi	x15,x15,-1792 # f9e2b900 <__global_pointer$+0xf7e2b100>
 18c:	                      08f42423          	sw	x15,136(x8)
     ###         // *front = (*front + 1) % V;
     ###         // return value;
     ###     // }
     ### 
     ###     // enqueue(START_POINT);
     ###         unvisited[*rear] = START_POINT;
 190:	                      00044703          	lbu	x14,0(x8)
     ###     graph[31] = 0b11110001000000000000000000000000;
 194:	                      f10007b7          	lui	x15,0xf1000
 198:	                      08f42623          	sw	x15,140(x8)
     ###     *rear = 0;
 19c:	                      0e040ca3          	sb	x0,249(x8)
     ###     *front = 0;
 1a0:	                      0e040c23          	sb	x0,248(x8)
     ###         unvisited[*rear] = START_POINT;
 1a4:	                      002007b7          	lui	x15,0x200
 1a8:	                      0ae78823          	sb	x14,176(x15) # 2000b0 <__flash_size+0x1ffcb0>
     ###         *rear = (*rear + 1) % V;
 1ac:	                      00100793          	addi	x15,x0,1
 1b0:	                      0ef40ca3          	sb	x15,249(x8)
     ### 
     ###     for(int8_t i = 0; i < V; i++){
     ###         distance[i] =  INT8_MAX;
 1b4:	                      09040513          	addi	x10,x8,144
 1b8:	                      02000613          	addi	x12,x0,32
 1bc:	                      07f00593          	addi	x11,x0,127
 1c0:	                      204000ef          	jal	x1,3c4 <memset>
     ###     }
     ###         *visited = 0;
     ### 
     ###     distance[START_POINT] = 0;
 1c4:	                      00044783          	lbu	x15,0(x8)
     ###         *visited = 0;
 1c8:	                      0e042e23          	sw	x0,252(x8)
     ### 
     ###     while(*front != *rear){
     ###         // *node = dequeue();
     ###         *node = unvisited[*front];
 1cc:	                      002006b7          	lui	x13,0x200
     ###     distance[START_POINT] = 0;
 1d0:	                      0ff7f793          	andi	x15,x15,255
 1d4:	                      00f40433          	add	x8,x8,x15
     ###     while(*front != *rear){
 1d8:	                      020007b7          	lui	x15,0x2000
     ###     distance[START_POINT] = 0;
 1dc:	                      08040823          	sb	x0,144(x8)
     ###         *front = (*front + 1) % V;
     ###         // return value;
     ###         
     ###         // visited[*node] = true;
     ### 
     ###         *visited |= (1 << *node);
 1e0:	                      00100813          	addi	x16,x0,1
     ###         for (int8_t i = 0; i < 4; i++){
     ###             neighbour[i] = (graph[*node] >> (27 - (i*8)) & 31);
     ###             weights[i] = (graph[*node] >> (24 - (i*8)) & 7);
     ###             if(neighbour[i]==0 && weights[i]==0){
     ###                 neighbour[i] = -1;
 1e4:	                      fff00513          	addi	x10,x0,-1
     ###             }
     ###             if((*visited & (1 << *node)) && neighbour[i]!=-1){
     ###                 // enqueue(neighbour[i]);
     ###                 unvisited[*rear] = neighbour[i];
     ###                 *rear = (*rear + 1) % V;
     ###                 if (distance[*node] + weights[i] < distance[neighbour[i]]){
 1e8:	                      09078893          	addi	x17,x15,144 # 2000090 <__stack+0x50>
     ###         for (int8_t i = 0; i < 4; i++){
 1ec:	                      0d468313          	addi	x6,x13,212 # 2000d4 <__flash_size+0x1ffcd4>
     ###     while(*front != *rear){
 1f0:	/-------------------> 0f87c703          	lbu	x14,248(x15)
 1f4:	|                     0f97c603          	lbu	x12,249(x15)
 1f8:	|                 /-- 06e61863          	bne	x12,x14,268 <path_planner.c.7ff4a42f+0x115>
     ###                 }
     ###             }
     ###         }
     ###     }
     ### 
     ###     *current = END_POINT;
 1fc:	|                 |   0047c703          	lbu	x14,4(x15)
     ###     while (*current != START_POINT){
 200:	|                 |   020006b7          	lui	x13,0x2000
     ###     *current = END_POINT;
 204:	|                 |   0ee78da3          	sb	x14,251(x15)
     ###     uint8_t idx = 0;
 208:	|                 |   00000793          	addi	x15,x0,0
     ###     while (*current != START_POINT){
 20c:	|  /--------------|-> 0006c583          	lbu	x11,0(x13) # 2000000 <__bss_end>
 210:	|  |              |   0fb6c603          	lbu	x12,251(x13)
     ###         path_planned[idx++] = *current;
 214:	|  |              |   00078713          	addi	x14,x15,0
 218:	|  |              |   02010513          	addi	x10,x2,32
 21c:	|  |              |   00178793          	addi	x15,x15,1
     ###     while (*current != START_POINT){
 220:	|  |              |   0ff5f593          	andi	x11,x11,255
     ###         path_planned[idx++] = *current;
 224:	|  |              |   0ff7f793          	andi	x15,x15,255
 228:	|  |              |   00e50733          	add	x14,x10,x14
     ###     while (*current != START_POINT){
 22c:	|  |     /--------|-- 14b61463          	bne	x12,x11,374 <path_planner.c.7ff4a42f+0x221>
     ###         *current = prev[*current];
     ###     }
     ### 
     ###     path_planned[idx++] = START_POINT;
 230:	|  |     |        |   0006c683          	lbu	x13,0(x13)
 234:	|  |     |        |   fed70023          	sb	x13,-32(x14)
     ### 
     ### //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = idx-1; i >= 0; --i) {
 238:	|  |     |        |   fff00713          	addi	x14,x0,-1
     ###         NODE_POINT = path_planned[i];
 23c:	|  |     |        |   020006b7          	lui	x13,0x2000
     ###     for (int i = idx-1; i >= 0; --i) {
 240:	|  |  /--|--------|-> fff78793          	addi	x15,x15,-1
 244:	|  |  |  |  /-----|-- 14e79263          	bne	x15,x14,388 <path_planner.c.7ff4a42f+0x235>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 248:	|  |  |  |  |     |   020007b7          	lui	x15,0x2000
 24c:	|  |  |  |  |     |   00100713          	addi	x14,x0,1
 250:	|  |  |  |  |     |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 254:	|  |  |  |  |     |   02c12083          	lw	x1,44(x2)
 258:	|  |  |  |  |     |   02812403          	lw	x8,40(x2)
 25c:	|  |  |  |  |     |   00000513          	addi	x10,x0,0
 260:	|  |  |  |  |     |   03010113          	addi	x2,x2,48
 264:	|  |  |  |  |     |   00008067          	jalr	x0,0(x1)
     ###         *node = unvisited[*front];
 268:	|  |  |  |  |     \-> 00e68633          	add	x12,x13,x14
 26c:	|  |  |  |  |         0b064603          	lbu	x12,176(x12)
     ###         *front = (*front + 1) % V;
 270:	|  |  |  |  |         00170713          	addi	x14,x14,1
 274:	|  |  |  |  |         01f77713          	andi	x14,x14,31
     ###         *node = unvisited[*front];
 278:	|  |  |  |  |         0ec68d23          	sb	x12,250(x13) # 20000fa <__stack+0xba>
     ###         *front = (*front + 1) % V;
 27c:	|  |  |  |  |         0ee78c23          	sb	x14,248(x15)
     ###         *visited |= (1 << *node);
 280:	|  |  |  |  |         0fc7a703          	lw	x14,252(x15)
 284:	|  |  |  |  |         00c81633          	sll	x12,x16,x12
 288:	|  |  |  |  |         01b00e13          	addi	x28,x0,27
 28c:	|  |  |  |  |         00e66633          	or	x12,x12,x14
 290:	|  |  |  |  |         0ec7ae23          	sw	x12,252(x15)
 294:	|  |  |  |  |         0d068713          	addi	x14,x13,208
     ###             neighbour[i] = (graph[*node] >> (27 - (i*8)) & 31);
 298:	|  |  |  |  |  /----> 0fa6c603          	lbu	x12,250(x13)
 29c:	|  |  |  |  |  |      00470e93          	addi	x29,x14,4
 2a0:	|  |  |  |  |  |      00261613          	slli	x12,x12,0x2
 2a4:	|  |  |  |  |  |      00c78633          	add	x12,x15,x12
 2a8:	|  |  |  |  |  |      01062603          	lw	x12,16(x12)
 2ac:	|  |  |  |  |  |      01c65633          	srl	x12,x12,x28
 2b0:	|  |  |  |  |  |      01f67613          	andi	x12,x12,31
 2b4:	|  |  |  |  |  |      00c70023          	sb	x12,0(x14)
     ###             weights[i] = (graph[*node] >> (24 - (i*8)) & 7);
 2b8:	|  |  |  |  |  |      0fa6c583          	lbu	x11,250(x13)
 2bc:	|  |  |  |  |  |      ffde0613          	addi	x12,x28,-3
 2c0:	|  |  |  |  |  |      00259593          	slli	x11,x11,0x2
 2c4:	|  |  |  |  |  |      00b785b3          	add	x11,x15,x11
 2c8:	|  |  |  |  |  |      0105a583          	lw	x11,16(x11)
 2cc:	|  |  |  |  |  |      00c5d633          	srl	x12,x11,x12
     ###             if(neighbour[i]==0 && weights[i]==0){
 2d0:	|  |  |  |  |  |      00074583          	lbu	x11,0(x14)
     ###             weights[i] = (graph[*node] >> (24 - (i*8)) & 7);
 2d4:	|  |  |  |  |  |      00767613          	andi	x12,x12,7
 2d8:	|  |  |  |  |  |      00c70223          	sb	x12,4(x14)
     ###             if(neighbour[i]==0 && weights[i]==0){
 2dc:	|  |  |  |  |  |      00b66633          	or	x12,x12,x11
 2e0:	|  |  |  |  |  |      01861613          	slli	x12,x12,0x18
 2e4:	|  |  |  |  |  |      41865613          	srai	x12,x12,0x18
 2e8:	|  |  |  |  |  |  /-- 00061663          	bne	x12,x0,2f4 <path_planner.c.7ff4a42f+0x1a1>
     ###                 neighbour[i] = -1;
 2ec:	|  |  |  |  |  |  |   00a70023          	sb	x10,0(x14)
     ###                 weights[i] = -1;
 2f0:	|  |  |  |  |  |  |   00a70223          	sb	x10,4(x14)
     ###             if((*visited & (1 << *node)) && neighbour[i]!=-1){
 2f4:	|  |  |  |  |  |  \-> 0fa6c603          	lbu	x12,250(x13)
 2f8:	|  |  |  |  |  |      0fc7a583          	lw	x11,252(x15)
 2fc:	|  |  |  |  |  |      00c81633          	sll	x12,x16,x12
 300:	|  |  |  |  |  |      00b67633          	and	x12,x12,x11
 304:	|  |  |  |  |  |  /-- 06060063          	beq	x12,x0,364 <path_planner.c.7ff4a42f+0x211>
 308:	|  |  |  |  |  |  |   00070583          	lb	x11,0(x14)
 30c:	|  |  |  |  |  |  +-- 04a58c63          	beq	x11,x10,364 <path_planner.c.7ff4a42f+0x211>
     ###                 unvisited[*rear] = neighbour[i];
 310:	|  |  |  |  |  |  |   0f97c603          	lbu	x12,249(x15)
 314:	|  |  |  |  |  |  |   00c68633          	add	x12,x13,x12
 318:	|  |  |  |  |  |  |   0ab60823          	sb	x11,176(x12)
     ###                 *rear = (*rear + 1) % V;
 31c:	|  |  |  |  |  |  |   0f97c603          	lbu	x12,249(x15)
 320:	|  |  |  |  |  |  |   00160613          	addi	x12,x12,1
 324:	|  |  |  |  |  |  |   01f67613          	andi	x12,x12,31
 328:	|  |  |  |  |  |  |   0ec78ca3          	sb	x12,249(x15)
     ###                 if (distance[*node] + weights[i] < distance[neighbour[i]]){
 32c:	|  |  |  |  |  |  |   0fa6c603          	lbu	x12,250(x13)
 330:	|  |  |  |  |  |  |   000e8e83          	lb	x29,0(x29)
 334:	|  |  |  |  |  |  |   00c78633          	add	x12,x15,x12
 338:	|  |  |  |  |  |  |   09064583          	lbu	x11,144(x12)
 33c:	|  |  |  |  |  |  |   00070603          	lb	x12,0(x14)
 340:	|  |  |  |  |  |  |   01d585b3          	add	x11,x11,x29
 344:	|  |  |  |  |  |  |   01160633          	add	x12,x12,x17
 348:	|  |  |  |  |  |  |   00064e83          	lbu	x29,0(x12)
 34c:	|  |  |  |  |  |  +-- 01d5dc63          	bge	x11,x29,364 <path_planner.c.7ff4a42f+0x211>
     ###                     distance[neighbour[i]] = distance[*node] + weights[i];
 350:	|  |  |  |  |  |  |   00b60023          	sb	x11,0(x12)
     ###                     prev[neighbour[i]] = *node;
 354:	|  |  |  |  |  |  |   00070603          	lb	x12,0(x14)
 358:	|  |  |  |  |  |  |   0fa6c583          	lbu	x11,250(x13)
 35c:	|  |  |  |  |  |  |   00c78633          	add	x12,x15,x12
 360:	|  |  |  |  |  |  |   0cb60c23          	sb	x11,216(x12)
     ###         for (int8_t i = 0; i < 4; i++){
 364:	|  |  |  |  |  |  \-> 00170713          	addi	x14,x14,1
 368:	|  |  |  |  |  |      ff8e0e13          	addi	x28,x28,-8
 36c:	|  |  |  |  |  \----- f26716e3          	bne	x14,x6,298 <path_planner.c.7ff4a42f+0x145>
 370:	\--|--|--|--|-------- e81ff06f          	jal	x0,1f0 <path_planner.c.7ff4a42f+0x9d>
     ###         path_planned[idx++] = *current;
 374:	   |  |  \--|-------> fec70023          	sb	x12,-32(x14)
     ###         *current = prev[*current];
 378:	   |  |     |         00c68633          	add	x12,x13,x12
 37c:	   |  |     |         0d864703          	lbu	x14,216(x12)
 380:	   |  |     |         0ee68da3          	sb	x14,251(x13)
 384:	   \--|-----|-------- e89ff06f          	jal	x0,20c <path_planner.c.7ff4a42f+0xb9>
     ###         NODE_POINT = path_planned[i];
 388:	      |     \-------> 00f10633          	add	x12,x2,x15
 38c:	      |               00064603          	lbu	x12,0(x12)
 390:	      |               00c68423          	sb	x12,8(x13)
     ###     for (int i = idx-1; i >= 0; --i) {
 394:	      \-------------- eadff06f          	jal	x0,240 <path_planner.c.7ff4a42f+0xed>

00000398 <_set_tls>:
 398:	00050213          	addi	x4,x10,0
 39c:	00008067          	jalr	x0,0(x1)

000003a0 <memcpy>:
 3a0:	       00050313          	addi	x6,x10,0
 3a4:	/----- 00060e63          	beq	x12,x0,3c0 <memcpy+0x20>
 3a8:	|  /-> 00058383          	lb	x7,0(x11)
 3ac:	|  |   00730023          	sb	x7,0(x6)
 3b0:	|  |   fff60613          	addi	x12,x12,-1
 3b4:	|  |   00130313          	addi	x6,x6,1
 3b8:	|  |   00158593          	addi	x11,x11,1
 3bc:	|  \-- fe0616e3          	bne	x12,x0,3a8 <memcpy+0x8>
 3c0:	\----> 00008067          	jalr	x0,0(x1)

000003c4 <memset>:
 3c4:	       00050313          	addi	x6,x10,0
 3c8:	/----- 00060a63          	beq	x12,x0,3dc <memset+0x18>
 3cc:	|  /-> 00b30023          	sb	x11,0(x6)
 3d0:	|  |   fff60613          	addi	x12,x12,-1
 3d4:	|  |   00130313          	addi	x6,x6,1
 3d8:	|  \-- fe061ae3          	bne	x12,x0,3cc <memset+0x8>
 3dc:	\----> 00008067          	jalr	x0,0(x1)
